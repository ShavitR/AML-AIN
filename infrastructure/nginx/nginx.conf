# =============================================================================
# AML-AIN Nginx Configuration
# =============================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules
load_module modules/ngx_http_geoip_module.so;
load_module modules/ngx_stream_geoip_module.so;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # =============================================================================
    # Basic Settings
    # =============================================================================
    
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # =============================================================================
    # Rate Limiting
    # =============================================================================
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/s;
    
    # =============================================================================
    # Upstream Definitions
    # =============================================================================
    
    # Orchestrator upstream
    upstream orchestrator_backend {
        least_conn;
        server orchestrator:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Frontend upstream
    upstream frontend_backend {
        least_conn;
        server frontend:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Meta-learning upstream
    upstream meta_learning_backend {
        least_conn;
        server meta-learning:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Knowledge graph upstream
    upstream knowledge_graph_backend {
        least_conn;
        server knowledge-graph:8001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Agent development upstream
    upstream agent_dev_backend {
        least_conn;
        server agent-dev:8002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Celery workers upstream
    upstream celery_workers_backend {
        least_conn;
        server celery-worker:8003 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # =============================================================================
    # Security Headers
    # =============================================================================
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # =============================================================================
    # Main Server Block
    # =============================================================================
    
    server {
        listen 80;
        listen [::]:80;
        server_name localhost;
        
        # Redirect HTTP to HTTPS in production
        # return 301 https://$server_name$request_uri;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # =============================================================================
        # API Routes
        # =============================================================================
        
        # Main API
        location /api/v1/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://orchestrator_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Meta-learning API
        location /api/meta-learning/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://meta_learning_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 600s;
            proxy_connect_timeout 75s;
        }
        
        # Knowledge graph API
        location /api/knowledge-graph/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://knowledge_graph_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }
        
        # Agent development API
        location /api/agent-dev/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://agent_dev_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }
        
        # Celery workers API
        location /api/celery/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://celery_workers_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }
        
        # =============================================================================
        # WebSocket Support
        # =============================================================================
        
        # WebSocket for real-time communication
        location /socket.io/ {
            proxy_pass http://orchestrator_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }
        
        # =============================================================================
        # File Upload
        # =============================================================================
        
        # File upload endpoint
        location /api/upload/ {
            limit_req zone=upload burst=5 nodelay;
            client_max_body_size 100M;
            
            proxy_pass http://orchestrator_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }
        
        # =============================================================================
        # Static Files
        # =============================================================================
        
        # Serve static files from frontend
        location /static/ {
            proxy_pass http://frontend_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # =============================================================================
        # Frontend Application
        # =============================================================================
        
        # Main frontend application
        location / {
            proxy_pass http://frontend_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }
    }
    
    # =============================================================================
    # HTTPS Server Block (for production)
    # =============================================================================
    
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name localhost;
    #     
    #     # SSL configuration
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     
    #     # Include the same location blocks as above
    #     include /etc/nginx/conf.d/*.conf;
    # }
    
    # =============================================================================
    # Monitoring Endpoints
    # =============================================================================
    
    # Nginx status for monitoring
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
    
    # =============================================================================
    # Error Pages
    # =============================================================================
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
    
    location = /404.html {
        root /usr/share/nginx/html;
    }
}

# =============================================================================
# Stream Configuration (for TCP/UDP proxying)
# =============================================================================

stream {
    # TCP upstream for database connections
    upstream postgres_backend {
        server postgres:5432;
    }
    
    # TCP upstream for Redis
    upstream redis_backend {
        server redis:6379;
    }
    
    # TCP upstream for Elasticsearch
    upstream elasticsearch_backend {
        server elasticsearch:9200;
    }
    
    # TCP upstream for Neo4j
    upstream neo4j_backend {
        server neo4j:7687;
    }
    
    # TCP upstream for MongoDB
    upstream mongodb_backend {
        server mongodb:27017;
    }
    
    # TCP upstream for RabbitMQ
    upstream rabbitmq_backend {
        server rabbitmq:5672;
    }
    
    # TCP upstream for Kafka
    upstream kafka_backend {
        server kafka:9092;
    }
    
    # TCP upstream for InfluxDB
    upstream influxdb_backend {
        server influxdb:8086;
    }
    
    # TCP upstream for MinIO
    upstream minio_backend {
        server minio:9000;
    }
    
    # Database proxy (for external access)
    # server {
    #     listen 5433;
    #     proxy_pass postgres_backend;
    # }
    
    # Redis proxy (for external access)
    # server {
    #     listen 6380;
    #     proxy_pass redis_backend;
    # }
    
    # Elasticsearch proxy (for external access)
    # server {
    #     listen 9201;
    #     proxy_pass elasticsearch_backend;
    # }
    
    # Neo4j proxy (for external access)
    # server {
    #     listen 7688;
    #     proxy_pass neo4j_backend;
    # }
    
    # MongoDB proxy (for external access)
    # server {
    #     listen 27018;
    #     proxy_pass mongodb_backend;
    # }
    
    # RabbitMQ proxy (for external access)
    # server {
    #     listen 5673;
    #     proxy_pass rabbitmq_backend;
    # }
    
    # Kafka proxy (for external access)
    # server {
    #     listen 9093;
    #     proxy_pass kafka_backend;
    # }
    
    # InfluxDB proxy (for external access)
    # server {
    #     listen 8087;
    #     proxy_pass influxdb_backend;
    # }
    
    # MinIO proxy (for external access)
    # server {
    #     listen 9002;
    #     proxy_pass minio_backend;
    # }
} 