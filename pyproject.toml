[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
skip-string-normalization = false
skip-magic-trailing-comma = false
preview = false

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["backend", "frontend"]
known_third_party = ["numpy", "pandas", "torch", "tensorflow", "transformers"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
    "node_modules",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101,S105,S106,S107",
    "migrations/*:E501",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "pandas.*",
    "torch.*",
    "tensorflow.*",
    "transformers.*",
    "sklearn.*",
    "cv2.*",
    "PIL.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "bokeh.*",
    "altair.*",
    "librosa.*",
    "soundfile.*",
    "webrtcvad.*",
    "speechrecognition.*",
    "pyaudio.*",
    "whisper.*",
    "whisperx.*",
    "gymnasium.*",
    "stable_baselines3.*",
    "ray.*",
    "tianshou.*",
    "garage.*",
    "learn2learn.*",
    "torch_meta.*",
    "maml_pytorch.*",
    "reptile_pytorch.*",
    "torch_geometric.*",
    "networkx.*",
    "igraph.*",
    "python_igraph.*",
    "stellargraph.*",
    "dgl.*",
    "prophet.*",
    "statsmodels.*",
    "arch.*",
    "pyflux.*",
    "neuralprophet.*",
    "darts.*",
    "optuna.*",
    "hyperopt.*",
    "scikit_optimize.*",
    "wandb.*",
    "mlflow.*",
    "tensorboard.*",
    "tensorboardx.*",
    "fastapi.*",
    "uvicorn.*",
    "streamlit.*",
    "gradio.*",
    "bentoml.*",
    "onnx.*",
    "onnxruntime.*",
    "tensorrt.*",
    "openvino.*",
    "sqlalchemy.*",
    "alembic.*",
    "psycopg2.*",
    "redis.*",
    "pymongo.*",
    "elasticsearch.*",
    "neo4j.*",
    "influxdb.*",
    "cassandra.*",
    "requests.*",
    "beautifulsoup4.*",
    "selenium.*",
    "playwright.*",
    "scrapy.*",
    "newspaper3k.*",
    "feedparser.*",
    "tweepy.*",
    "youtube_dl.*",
    "yt_dlp.*",
    "openai.*",
    "anthropic.*",
    "cohere.*",
    "huggingface_hub.*",
    "replicate.*",
    "runpod.*",
    "modal.*",
    "tqdm.*",
    "click.*",
    "rich.*",
    "colorama.*",
    "python_dotenv.*",
    "pyyaml.*",
    "toml.*",
    "configparser.*",
    "argparse.*",
    "pathlib2.*",
    "shutil.*",
    "subprocess32.*",
    "pytest.*",
    "pytest_cov.*",
    "pytest_mock.*",
    "pytest_asyncio.*",
    "pytest_benchmark.*",
    "bandit.*",
    "safety.*",
    "prometheus_client.*",
    "statsd.*",
    "structlog.*",
    "loguru.*",
    "sentry_sdk.*",
    "newrelic.*",
    "cryptography.*",
    "bcrypt.*",
    "passlib.*",
    "python_jose.*",
    "python_multipart.*",
    "httpx.*",
    "asyncio.*",
    "aiohttp.*",
    "aiofiles.*",
    "celery.*",
    "rq.*",
    "psutil.*",
    "py_cpuinfo.*",
    "gputil.*",
    "nvidia_ml_py3.*",
    "pynvml.*",
    "jupyter.*",
    "jupyterlab.*",
    "ipython.*",
    "notebook.*",
    "voila.*",
    "dash.*",
    "sphinx.*",
    "sphinx_rtd_theme.*",
    "myst_parser.*",
    "autodoc.*",
    "napoleon.*",
    "conda.*",
    "pip.*",
    "setuptools.*",
    "wheel.*",
    "build.*",
    "twine.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "backend/tests",
    "tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/node_modules/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.bandit]
exclude_dirs = ["tests", "test_*", "*/tests/*", "*/test_*"]
skips = ["B101", "B601"]
targets = ["backend"]

[tool.safety]
output = "json"
full-report = true
save-json = "safety-report.json"

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
    "node_modules",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "S105", "S106", "S107"]
"migrations/*" = ["E501"] 